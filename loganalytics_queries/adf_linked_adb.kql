
//list of all activity types
ADFActivityRun 
| where Status == "Succeeded"
| summarize ActivityCount = count(TimeGenerated) by ActivityType

ADFActivityRun 
//| limit 200 
| where ActivityType =="DatabricksNotebook"
| summarize by Status, ActivityType

//Notebook run types
let ADF_Activity= ADFActivityRun 
| where Status == "Failed"
//| where ActivityType  =="DatabricksNotebook"
| extend RunPageURL = parse_json(Output).runPageUrl
| extend ExecutionDuration = parse_json(Output).executionDuration
| extend RunID = substring(reverse(split(reverse(RunPageURL),"/",0)),2,strlen(split(reverse(RunPageURL),"/",0))-4)
| extend NotebookPath = parse_json(Input).notebookPath
| extend InputParam_chosen =coalesce(extractjson("$.['tables']", tostring(parse_json(Input).baseParameters)) //mine for various params, custom to implementation
    , iif(isempty(extractjson("$.['table_name']", tostring(parse_json(Input).baseParameters))),"", strcat("table_name: ", extractjson("$.['table_name']", tostring(parse_json(Input).baseParameters))))
    , iif(isempty(extractjson("$.['job_name']", tostring(parse_json(Input).baseParameters))), "",strcat("job_name: ", extractjson("$.['job_name']", tostring(parse_json(Input).baseParameters))))
    , iif(isempty(extractjson("$.['table']", tostring(parse_json(Input).baseParameters))), "",strcat("table: ", extractjson("$.['table']", tostring(parse_json(Input).baseParameters))))
    )
| project TimeGenerated, PipelineName, ActivityName, InputParam_chosen, ADB_RunID= RunID, NotebookPath, ExecutionDuration, RunPageURL;
ADF_Activity

//link the ADF runs to ADB runs and get status and cost

let ADF_Activity= ADFActivityRun 
| where Status in ("Succeeded", "Failed")
| where ActivityType  =="DatabricksNotebook"
| extend RunPageURL = parse_json(Output).runPageUrl
| extend ExecutionDuration = parse_json(Output).executionDuration
| extend RunId = substring(reverse(split(reverse(RunPageURL),"/",0)),2,strlen(split(reverse(RunPageURL),"/",0))-4)
| extend NotebookPath = parse_json(Input).notebookPath
| extend InputParam_chosen =coalesce(extractjson("$.['tables']", tostring(parse_json(Input).baseParameters)) //mine for various params, custom to implementation
    , iif(isempty(extractjson("$.['table_name']", tostring(parse_json(Input).baseParameters))),"", strcat("table_name: ", extractjson("$.['table_name']", tostring(parse_json(Input).baseParameters))))
    , iif(isempty(extractjson("$.['job_name']", tostring(parse_json(Input).baseParameters))), "",strcat("job_name: ", extractjson("$.['job_name']", tostring(parse_json(Input).baseParameters))))
    , iif(isempty(extractjson("$.['table']", tostring(parse_json(Input).baseParameters))), "",strcat("table: ", extractjson("$.['table']", tostring(parse_json(Input).baseParameters))))
    )
| project ADFJobEnd = TimeGenerated, PipelineName, ActivityName, InputParam_chosen, RunId, NotebookPath, ExecutionDuration, RunPageURL, ADFRunStatus = Status;
let pool_ids = DatabricksClusters
| where ActionName == "create"
| extend rparams = parse_json(RequestParams)
| extend response = parse_json(Response)
| extend StatusCode = response.statusCode
| extend ClusterId = coalesce(extractjson("$.['cluster_id']", tostring(rparams))
                        ,extractjson("$.['clusterId']", tostring(rparams))
                        ,extractjson("$.['cluster_id']", tostring(response.result)))
| extend ClusterName = coalesce(rparams.clusterName
                                , rparams.cluster_name)
| extend CustomTags = rparams.custom_tags, NumWorkers = rparams.num_workers
| extend CustomTagRunName = tostring(extractjson("$.['RunName']", tostring(rparams.custom_tags)))
| extend InstancePoolID = tostring(rparams.instance_pool_id);
let instPools =  datatable(InstancePoolID:string, PoolName:string
            , NodeType:string, DBUsage:int, DBUCost:decimal, VMCost:decimal, MinIdleInstances:int, Currency:string)
            ['0112-102712-own658-pool-9urlhql1', 'Pool0012', 'E16as v4', 4, 1.00, 1.01, 0, 'GBP',
             '0812-131731-homie204-pool-2U1OYTum', 'Pool0812', 'D13 v2', 2, 0.50, 0.36, 0, 'GBP',
             '1207-171037-steer985-pool-4hkjz8hd', 'Pool1207', 'L16s', 4, 1.00, 1.24, 0, 'GBP'];
let j_start = DatabricksJobs
| where ActionName == "runStart"
| extend rparams = parse_json(RequestParams)
| extend RunId = tostring(rparams.runId), JobId = rparams.jobId, ClusterId = tostring(rparams.clusterId)
| project StartTimeGen = TimeGenerated, RunId, JobId, ClusterId, StartParams = RequestParams;
let j_end = DatabricksJobs
| where ActionName in ("runFailed","runSucceeded")
| extend rparams = parse_json(RequestParams)
| extend RunId = tostring(rparams.runId), JobId = rparams.jobId, ClusterId = tostring(rparams.clusterId)
| project EndTimeGen = TimeGenerated, RunId, JobId, ClusterId, EndParams = RequestParams, EndActionName = ActionName;
ADF_Activity
| join kind=inner j_start on RunId
| join kind=leftouter j_end on RunId
| extend JobDuration = toint(datetime_diff("second", EndTimeGen, StartTimeGen))
| join kind=inner pool_ids on ClusterId
| join kind=leftouter instPools on InstancePoolID
| extend CostOfDBU = round(JobDuration*DBUCost/3600.00,3), CostOfCompute = round((JobDuration+60)*(NumWorkers+1)*VMCost/3600.00,3)
| extend TotalClusterCost = CostOfCompute+CostOfDBU 
| project ADFJobEnd, JobId, RunId, ClusterId, ClusterName, CustomTagRunName, DatabricksRunStatus = EndActionName, ADFRunStatus, InputParam_chosen, JobDuration, NumWorkers, InstancePoolID, PoolName, NodeType, TotalClusterCost, Currency